{"version":3,"sources":["components/OysterHeader/index.js","components/OysterHeader/OysterHeader.js","content/LandingPage/index.js","content/LandingPage/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["OysterHeader","HeaderContainer","render","isSideNavExpanded","onClickSideNavExpand","Header","SkipToContent","HeaderMenuButton","onClick","isActive","HeaderName","element","Link","to","prefix","HeaderNavigation","HeaderMenuItem","href","SideNav","expanded","isPersistent","SideNavItems","HeaderSideNavItems","HeaderGlobalBar","HeaderGlobalAction","LandingPage","App","Content","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6XACeA,ECqBM,kBACjB,cAACC,EAAA,EAAD,CACIC,OAAQ,gBAAGC,EAAH,EAAGA,kBAAmBC,EAAtB,EAAsBA,qBAAtB,OACJ,eAACC,EAAA,EAAD,CAAQ,aAAW,eAAnB,UACI,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACI,aAAW,YACXC,QAASJ,EACTK,SAAUN,IAEd,cAACO,EAAA,EAAD,CAAYC,QAASC,IAAMC,GAAG,IAAIC,OAAO,GAAzC,0BAGA,cAACC,EAAA,EAAD,CAAkB,aAAW,eAA7B,SACI,cAACC,EAAA,EAAD,CAAgBC,KAAK,SAArB,sBAEJ,cAACC,EAAA,EAAD,CACI,aAAW,kBACXC,SAAUhB,EACViB,cAAc,EAHlB,SAII,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACN,EAAA,EAAD,CAAgBC,KAAK,SAArB,0BAIZ,eAACM,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAoB,aAAW,gBAA/B,SACI,cAAC,IAAD,MAEJ,cAACA,EAAA,EAAD,CAAoB,aAAW,cAA/B,SACI,cAAC,IAAD,MAEJ,cAACA,EAAA,EAAD,CAAoB,aAAW,eAA/B,SACI,cAAC,IAAD,gB,gBCvDTC,ECCK,WAClB,OAAO,+CCMHC,E,4JACJ,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,e,GAP3BM,aAeHL,ICZKM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASnC,OACL,cAAC,IAAD,UACE,cAAC,EAAD,MAEFoC,SAASC,eAAe,SDqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e48d635.chunk.js","sourcesContent":["import OysterHeader from './OysterHeader';\nexport default OysterHeader;","import React from 'react';\nimport {\n    Header,\n    HeaderContainer,\n    HeaderName,\n    HeaderNavigation,\n    HeaderMenuButton,\n    HeaderMenuItem,\n    HeaderGlobalBar,\n    HeaderGlobalAction,\n    SkipToContent,\n    SideNav,\n    SideNavItems,\n    HeaderSideNavItems,\n} from 'carbon-components-react';\nimport {\n    AppSwitcher20,\n    Notification20,\n    UserAvatar20,\n} from '@carbon/icons-react';\nimport { Link } from 'react-router-dom';\n\nconst OysterHeader = () => (\n    <HeaderContainer\n        render={({ isSideNavExpanded, onClickSideNavExpand }) => (\n            <Header aria-label=\"Oyster Haven\">\n                <SkipToContent />\n                <HeaderMenuButton\n                    aria-label=\"Open menu\"\n                    onClick={onClickSideNavExpand}\n                    isActive={isSideNavExpanded}\n                />\n                <HeaderName element={Link} to=\"/\" prefix=\"\">\n                    Oyster Haven\n                </HeaderName>\n                <HeaderNavigation aria-label=\"Oyster Haven\">\n                    <HeaderMenuItem href=\"/repos\">Trends</HeaderMenuItem>\n                </HeaderNavigation>\n                <SideNav\n                    aria-label=\"Side navigation\"\n                    expanded={isSideNavExpanded}\n                    isPersistent={false}>\n                    <SideNavItems>\n                        <HeaderSideNavItems>\n                            <HeaderMenuItem href=\"/repos\">Trends</HeaderMenuItem>\n                        </HeaderSideNavItems>\n                    </SideNavItems>\n                </SideNav>\n                <HeaderGlobalBar>\n                    <HeaderGlobalAction aria-label=\"Notifications\">\n                        <Notification20 />\n                    </HeaderGlobalAction>\n                    <HeaderGlobalAction aria-label=\"User Avatar\">\n                        <UserAvatar20 />\n                    </HeaderGlobalAction>\n                    <HeaderGlobalAction aria-label=\"App Switcher\">\n                        <AppSwitcher20 />\n                    </HeaderGlobalAction>\n                </HeaderGlobalBar>\n            </Header>\n        )}\n    />\n);\n\nexport default OysterHeader;","import LandingPage from './LandingPage';\nexport default LandingPage;","import React from 'react';\n\nconst LandingPage = () => {\n  return <div>COMING SOON</div>;\n};\n\nexport default LandingPage;","import React, { Component } from 'react';\nimport './App.scss';\n\nimport OysterHeader from './components/OysterHeader';\nimport { Content } from 'carbon-components-react';\nimport { Route, Switch } from 'react-router-dom';\nimport LandingPage from './content/LandingPage';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <OysterHeader />\n        <Content>\n          <Switch>\n            <Route exact path=\"/\" component={LandingPage} />\n          </Switch>\n        </Content>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n    document.getElementById('root')\n  );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}